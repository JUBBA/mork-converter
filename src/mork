#!/usr/bin/env python
# Copyright 2009, 2010 Kevin Goodsell

# Do python version checking up front.
import sys

minPythonVersion = (2, 4)
if sys.version_info < minPythonVersion:
    strVersion = '.'.join([str(part) for part in minPythonVersion])
    print >> sys.stderr, ('This script requires python %s or higher!' %
                          strVersion)
    sys.exit(1)

# Done with version checking. Get on with real work.

import optparse

from MorkDB.filters import enumerate_filters

version = '2.0-prerelease'

def printTokens(f):
    import MorkDB.morklex as morklex
    morklex.printTokens(f)

def printSyntaxTree(f):
    import MorkDB.morkyacc as morkyacc
    tree = morkyacc.parseFile(f)
    print tree

def processDatabase(f, filters, opts):
    import MorkDB.morkdb as morkdb
    import MorkDB.morkyacc as morkyacc

    tree = morkyacc.parseFile(f)
    db = morkdb.MorkDatabase.fromAst(tree)

    for filt in filters:
        filt.process(db, opts)

def parse_arguments(args, filters):
    parser = optparse.OptionParser(usage='%prog [options] [<mork-file>]',
        version='Mork converter by Kevin Goodsell, version %s' % version)

    parser.add_option('-o', '--outname', help='output file or dir name')
    parser.add_option('-e', '--out-encoding', metavar='ENC',
        help="use ENC as the output encoding (e.g., utf-16)")

    for f in filters:
        f.add_options(parser)

    debug_group = optparse.OptionGroup(parser, 'Debug Options')
    debug_group.add_option('--tokens', dest='out_format', action='store_const',
        const='tokens', help='just print lexical tokens')
    debug_group.add_option('--syntax', dest='out_format', action='store_const',
        const='syntax', help='just print abstract syntax')
    parser.add_option_group(debug_group)

    parser.set_defaults(out_encoding='utf-8')

    (options, arguments) = parser.parse_args(args)

    if len(arguments) > 1:
        parser.error('too many file arguments')

    return (options, arguments)

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    filters = enumerate_filters()
    (opts, arguments) = parse_arguments(args, filters)

    if len(arguments) == 0:
        f = sys.stdin
    else:
        f = open(arguments[0])

    if opts.out_format == 'tokens':
        printTokens(f)
    elif opts.out_format == 'syntax':
        printSyntaxTree(f)
    else:
        processDatabase(f, filters, opts)

    return 0


if __name__ == '__main__':
    sys.exit(main())
