#!/usr/bin/env python
# Copyright (c) 2009 Kevin Goodsell

# Do python version checking up front.
import sys

minPythonVersion = (2, 4)
if sys.version_info < minPythonVersion:
    strVersion = '.'.join([str(part) for part in minPythonVersion])
    print >> sys.stderr, ('This script requires python %s or higher!' %
                          strVersion)
    sys.exit(1)

# Done with version checking. Get on with real work.

import getopt

import MorkDB.filter.output as output
import MorkDB.filter.database as dbfilter

version = '1.0'

def showVersion():
    print ('Converter for Mozilla Mork files by Kevin Goodsell, version %s'
        % version)

def usage(msg=None):
    if msg:
        print >> sys.stderr, msg

    print >> sys.stderr,  'usage: %s (-h|--help)' % sys.argv[0]
    print >> sys.stderr,  '       %s (-v|--version)' % sys.argv[0]
    print >> sys.stderr, ('       %s [--filter=<filterArg> ...] '
                          '[--format=<filterArg>] [<file>]' % sys.argv[0])
    print >> sys.stderr, ('       <filterArg> has the form'
        ' <filtername>[:arg1[=val1]...[:argN[=valN]]]')
    print >> sys.stderr
    print >> sys.stderr, ('for debugging only, print lexical tokens or '
                          'abstract syntax:')
    print >> sys.stderr, '       %s (--tokens|--syntax) [<file>]' % sys.argv[0]
    print >> sys.stderr

    print >> sys.stderr, 'Available database filters and options:'
    print >> sys.stderr
    for (filtName, filtModule) in dbfilter.filters.iterModules():
        filterUsage(filtName, filtModule)

    print >> sys.stderr, 'Available output filters and options:'
    print >> sys.stderr
    for (filtName, filtModule) in output.filters.iterModules():
        filterUsage(filtName, filtModule)

def filterUsage(name, module):
    if module.description:
        nameLine = '%s - %s' % (name, module.description)
    else:
        nameLine = name
    print >> sys.stderr, nameLine

    arguments = '\n'.join('    %s: %s' % (name, desc) for (name, desc) in
                          module.usage)
    if arguments:
        print >> sys.stderr, '  Arguments:'
        print >> sys.stderr, arguments
    print >> sys.stderr

def splitFilterArgs(nameAndArgs):
    pieces = nameAndArgs.split(':')
    filterName = pieces[0]
    args = pieces[1:]

    argDict = {}
    for arg in args:
        pieces = arg.split('=', 1)
        argName = pieces[0]
        if len(pieces) == 1:
            argVal = ''
        else:
            argVal = pieces[1]

        argDict[argName] = argVal

    return (filterName, argDict)

def printTokens(f):
    import MorkDB.morklex as morklex
    morklex.printTokens(f)

def printSyntaxTree(f):
    import MorkDB.morkyacc as morkyacc
    tree = morkyacc.parseFile(f)
    print tree

def processDatabase(f, filters, format):
    import MorkDB.morkdb as morkdb
    import MorkDB.morkyacc as morkyacc

    tree = morkyacc.parseFile(f)
    db = morkdb.MorkDatabase.fromAst(tree)

    # Apply db filters
    for filt in filters:
        (filtName, args) = splitFilterArgs(filt)
        filtModule = dbfilter.filters.getModule(filtName)
        filtModule.filter(db, args)

    # Apply output filter
    (filtName, args) = splitFilterArgs(format)
    outputModule = output.filters.getModule(filtName)
    outputModule.output(db, args)

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    try:
        (options, arguments) = getopt.getopt(args, 'hv',
            ['tokens', 'syntax', 'help', 'format=', 'version', 'filter='])
    except getopt.GetoptError, e:
        usage(str(e))
        return 2

    tokens = False
    syntax = False
    formatGiven = False
    format = 'xml'
    filters = []

    for (opt, val) in options:
        if opt in ('-h', '--help'):
            usage()
            return 0
        elif opt in ('-v', '--version'):
            showVersion()
            return 0
        elif opt == '--tokens':
            tokens = True
        elif opt == '--syntax':
            syntax = True
        elif opt == '--format':
            formatGiven = True
            format = val
        elif opt == '--filter':
            filters.append(val)

    # XXX This won't quite cover it
    mutualyExclusive = [opt for opt in (tokens, syntax, formatGiven) if opt]
    if len(mutualyExclusive) > 1:
        usage('choose one (or zero) of --tokens, --syntax, or --format')
        return 2

    if len(arguments) == 0:
        f = sys.stdin
    else:
        f = open(arguments[0])

    if tokens:
        printTokens(f)
    elif syntax:
        printSyntaxTree(f)
    else:
        processDatabase(f, filters, format)

    return 0


if __name__ == '__main__':
    sys.exit(main())
